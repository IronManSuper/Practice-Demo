{"version":3,"sources":["abstractDemo.js"],"names":[],"mappings":"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","file":"abstractDemo-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2017/2/6.\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/**\r\n *抽象类\r\n * 抽象类作为其它派生类的基类。\r\n * 它们一般不会直接被实例化。\r\n * 不同的接口，抽象类可以包含成员的实现细节\r\n * abstract关键字是用于定义抽象类和在抽象类内部定义的抽象方法\r\n */\r\nvar Animal = (function () {\r\n    function Animal() {\r\n    }\r\n    Animal.prototype.move = function () {\r\n        console.log('roaming the earch...');\r\n    };\r\n    return Animal;\r\n}());\r\n/**\r\n *抽象类中的抽象方法不包含具体实现并且必须在派生类中实现。\r\n * 抽象方法的语法与接口方法相似。\r\n * 两者都是定义在方法签名但不包含方法体。\r\n * 然而，抽象方法必须包含abstract关键字并且可以包含访问修饰符\r\n */\r\nvar Department = (function () {\r\n    function Department(name) {\r\n        this.name = name;\r\n    }\r\n    Department.prototype.printName = function () {\r\n        console.log('Department name:' + this.name);\r\n    };\r\n    return Department;\r\n}());\r\nvar AccountingDepartment = (function (_super) {\r\n    __extends(AccountingDepartment, _super);\r\n    function AccountingDepartment() {\r\n        _super.call(this, 'Accounting and Auditing'); //constructor in derived classes must call super()\r\n    }\r\n    AccountingDepartment.prototype.printMeeting = function () {\r\n        console.log('The Accounting Department meets each Monday at 10am.');\r\n    };\r\n    AccountingDepartment.prototype.generateReports = function () {\r\n        console.log('Generating accounting reports');\r\n    };\r\n    return AccountingDepartment;\r\n}(Department));\r\n//let department:Department;\r\n//department=new Department();//无法创建一个抽象了的一个实例\r\nvar department = new AccountingDepartment();\r\ndepartment.printName();\r\ndepartment.printMeeting();\r\ndepartment.generateReports(); //代码错误，仅供学习参考\r\n/**\r\n *高级技巧\r\n * 当你在TypeScript里声明了一个类的时候，实际上同时声明了很多东西。\r\n * 首先就是类的实例的类型\r\n */\r\nvar Greeter = (function () {\r\n    function Greeter(message) {\r\n        this.greeting = message;\r\n    }\r\n    Greeter.prototype.greet = function () {\r\n        return \"Hello,\" + this.greeting;\r\n    };\r\n    return Greeter;\r\n}());\r\n//这里，我们写了 let greeter:Greeter,意思是Greeter类的实例的类型是Greeter.\r\n//这对于用过其他面向对象语言的程序员来讲是老习惯了。\r\nvar greeter;\r\nconsole.log(greeter);\r\ngreeter = new Greeter('world');\r\nconsole.log(greeter.greet());\r\nvar Greeter2 = (function () {\r\n    function Greeter2() {\r\n    }\r\n    Greeter2.prototype.greet = function () {\r\n        if (this.greeting) {\r\n            return \"Hello,\" + this.greeting;\r\n        }\r\n        else {\r\n            return Greeter2.standardGreeting;\r\n        }\r\n    };\r\n    Greeter2.standardGreeting = \"Hello,there\";\r\n    return Greeter2;\r\n}());\r\nvar greeter2;\r\ngreeter2 = new Greeter2();\r\nconsole.log(greeter2.greet());\r\nvar greeterMaker = Greeter2;\r\ngreeterMaker.standardGreeting = \"Hey there\";\r\nvar greeter3 = new greeterMaker();\r\nconsole.log(greeter3.greet());\r\nvar Point = (function () {\r\n    function Point() {\r\n    }\r\n    return Point;\r\n}());\r\nvar point3d = { x: 1, y: 2, z: 3 };\r\nconsole.log(point3d);\r\n//# sourceMappingURL=abstractDemo.js.map"]}