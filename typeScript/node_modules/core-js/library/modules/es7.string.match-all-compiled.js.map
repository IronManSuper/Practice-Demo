{"version":3,"sources":["es7.string.match-all.js"],"names":[],"mappings":"AAAA;AACA;;AACA,IAAI,UAAc,QAAQ,WAAR,CAAlB;AAAA,IACI,UAAc,QAAQ,YAAR,CADlB;AAAA,IAEI,WAAc,QAAQ,cAAR,CAFlB;AAAA,IAGI,WAAc,QAAQ,cAAR,CAHlB;AAAA,IAII,WAAc,QAAQ,UAAR,CAJlB;AAAA,IAKI,cAAc,OAAO,SALzB;;AAOA,IAAI,wBAAwB,SAAxB,qBAAwB,CAAS,MAAT,EAAiB,MAAjB,EAAwB;AAClD,OAAK,EAAL,GAAU,MAAV;AACA,OAAK,EAAL,GAAU,MAAV;AACD,CAHD;;AAKA,QAAQ,gBAAR,EAA0B,qBAA1B,EAAiD,eAAjD,EAAkE,SAAS,IAAT,GAAe;AAC/E,MAAI,QAAQ,KAAK,EAAL,CAAQ,IAAR,CAAa,KAAK,EAAlB,CAAZ;AACA,SAAO,EAAC,OAAO,KAAR,EAAe,MAAM,UAAU,IAA/B,EAAP;AACD,CAHD;;AAKA,QAAQ,QAAQ,CAAhB,EAAmB,QAAnB,EAA6B;AAC3B,YAAU,SAAS,QAAT,CAAkB,MAAlB,EAAyB;AACjC,YAAQ,IAAR;AACA,QAAG,CAAC,SAAS,MAAT,CAAJ,EAAqB,MAAM,UAAU,SAAS,mBAAnB,CAAN;AACrB,QAAI,IAAQ,OAAO,IAAP,CAAZ;AAAA,QACI,QAAQ,WAAW,WAAX,GAAyB,OAAO,OAAO,KAAd,CAAzB,GAAgD,SAAS,IAAT,CAAc,MAAd,CAD5D;AAAA,QAEI,KAAQ,IAAI,MAAJ,CAAW,OAAO,MAAlB,EAA0B,CAAC,MAAM,OAAN,CAAc,GAAd,CAAD,GAAsB,KAAtB,GAA8B,MAAM,KAA9D,CAFZ;AAGA,OAAG,SAAH,GAAe,SAAS,OAAO,SAAhB,CAAf;AACA,WAAO,IAAI,qBAAJ,CAA0B,EAA1B,EAA8B,CAA9B,CAAP;AACD;AAT0B,CAA7B","file":"es7.string.match-all-compiled.js","sourcesContent":["'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export     = require('./_export')\n  , defined     = require('./_defined')\n  , toLength    = require('./_to-length')\n  , isRegExp    = require('./_is-regexp')\n  , getFlags    = require('./_flags')\n  , RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function(regexp, string){\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){\n  var match = this._r.exec(this._s);\n  return {value: match, done: match === null};\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp){\n    defined(this);\n    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');\n    var S     = String(this)\n      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)\n      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});"]}