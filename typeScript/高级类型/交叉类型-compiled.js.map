{"version":3,"sources":["交叉类型.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;;;;;AAOA,IAAI,YAAa,aAAQ,UAAK,SAAd,IAA4B,UAAU,CAAV,EAAa,CAAb,EAAgB;AACxD,SAAK,IAAI,CAAT,IAAc,CAAd;AAAiB,YAAI,EAAE,cAAF,CAAiB,CAAjB,CAAJ,EAAyB,EAAE,CAAF,IAAO,EAAE,CAAF,CAAP;AAA1C,KACA,SAAS,EAAT,GAAc;AAAE,aAAK,WAAL,GAAmB,CAAnB;AAAuB;AACvC,MAAE,SAAF,GAAc,MAAM,IAAN,GAAa,OAAO,MAAP,CAAc,CAAd,CAAb,IAAiC,GAAG,SAAH,GAAe,EAAE,SAAjB,EAA4B,IAAI,EAAJ,EAA7D,CAAd;AACH,CAJD;AAKA;;;AAGA;AACA,SAAS,MAAT,CAAgB,KAAhB,EAAuB,MAAvB,EAA+B;AAC3B,QAAI,SAAS,EAAb;AACA,SAAK,IAAI,EAAT,IAAe,KAAf,EAAsB;AAClB,eAAO,EAAP,IAAa,MAAM,EAAN,CAAb;AACH;AACD,SAAK,IAAI,EAAT,IAAe,MAAf,EAAuB;AACnB,YAAI,CAAC,OAAO,cAAP,CAAsB,EAAtB,CAAL,EAAgC;AAC5B,mBAAO,EAAP,IAAa,OAAO,EAAP,CAAb;AACH;AACJ;AACD,WAAO,MAAP;AACH;AACD,IAAI,SAAU,YAAY;AACtB,aAAS,MAAT,CAAgB,IAAhB,EAAsB;AAClB,aAAK,IAAL,GAAY,IAAZ;AACH;AACD,WAAO,MAAP;AACH,CALa,EAAd;AAMA,IAAI,gBAAiB,YAAY;AAC7B,aAAS,aAAT,GAAyB,CACxB;AACD,kBAAc,SAAd,CAAwB,GAAxB,GAA8B,YAAY,CACzC,CADD;AAEA,WAAO,aAAP;AACH,CANoB,EAArB;AAOA,IAAI,MAAM,OAAO,IAAI,MAAJ,CAAW,KAAX,CAAP,EAA0B,IAAI,aAAJ,EAA1B,CAAV;AACA,IAAI,IAAI,IAAI,IAAZ;AACA,IAAI,GAAJ;AACA;AACA;;;;AAIA,SAAS,OAAT,CAAiB,KAAjB,EAAwB,OAAxB,EAAiC;AAC7B,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,eAAO,MAAM,UAAU,CAAhB,EAAmB,IAAnB,CAAwB,GAAxB,IAA+B,KAAtC;AACH;AACD,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,eAAO,UAAU,KAAjB;AACH;AACD,UAAM,IAAI,KAAJ,CAAU,oCAAoC,OAApC,GAA8C,IAAxD,CAAN;AACH;AACD,QAAQ,aAAR,EAAuB,CAAvB;AACA;AACA,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC;AAC9B,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,eAAO,MAAM,UAAU,CAAhB,EAAmB,IAAnB,CAAwB,GAAxB,IAA+B,KAAtC;AACH;AACD,QAAI,OAAO,OAAP,KAAmB,SAAvB,EAAkC;AAC9B,eAAO,UAAU,KAAjB;AACH;AACD,UAAM,IAAI,KAAJ,CAAU,oCAAoC,OAApC,GAA8C,IAAxD,CAAN;AACH;AACD,IAAI,iBAAiB,SAAS,aAAT,EAAwB,IAAxB,CAArB;AACA,QAAQ,GAAR,CAAY,cAAZ;AACA,SAAS,WAAT,GAAuB;AACnB;AACH;AACD,IAAI,MAAM,aAAV;AACA,IAAI,OAAJ;AACA,IAAI,IAAJ;AACA;AACA;;;;;;AAMA;;;;;;;AAOA;AACA,IAAI,OAAO,aAAX;AACA,IAAI,KAAK,IAAL,EAAJ,EAAiB;AACb,SAAK,IAAL;AACH,CAFD,MAGK;AACD,SAAK,GAAL;AACH;AACD;;;;;;;;;AASA,SAAS,MAAT,CAAgB,GAAhB,EAAqB;AACjB,WAAO,IAAI,IAAJ,OAAe,SAAtB;AACH;AACD;AACA;AACA;AACA;AACA,IAAI,OAAO,GAAP,CAAJ,EAAiB;AACb,QAAI,IAAJ;AACH,CAFD,MAGK;AACD,QAAI,GAAJ;AACH;AACD;AACA;AACA;AACA,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACjB,WAAO,OAAO,CAAP,KAAa,QAApB;AACH;AACD,SAAS,QAAT,CAAkB,CAAlB,EAAqB;AACjB,WAAO,OAAO,CAAP,KAAa,QAApB;AACH;AACD,SAAS,QAAT,CAAkB,KAAlB,EAAyB,OAAzB,EAAkC;AAC9B,QAAI,SAAS,OAAT,CAAJ,EAAuB;AACnB,eAAO,MAAM,UAAU,CAAhB,EAAmB,IAAnB,CAAwB,GAAxB,IAA+B,KAAtC;AACH;AACD,QAAI,SAAS,OAAT,CAAJ,EAAuB;AACnB,eAAO,UAAU,KAAjB;AACH;AACD,UAAM,IAAI,KAAJ,CAAU,oCAAoC,OAApC,GAA8C,GAAxD,CAAN;AACH;AACD,IAAI,uBAAwB,YAAY;AACpC,aAAS,oBAAT,CAA8B,SAA9B,EAAyC;AACrC,aAAK,SAAL,GAAiB,SAAjB;AACH;AACD,yBAAqB,SAArB,CAA+B,gBAA/B,GAAkD,YAAY;AAC1D,eAAO,MAAM,KAAK,SAAL,GAAiB,CAAvB,EAA0B,IAA1B,CAA+B,GAA/B,CAAP;AACH,KAFD;AAGA,WAAO,oBAAP;AACH,CAR2B,EAA5B;AASA,IAAI,eAAgB,YAAY;AAC5B,aAAS,YAAT,CAAsB,KAAtB,EAA6B;AACzB,aAAK,KAAL,GAAa,KAAb;AACH;AACD,iBAAa,SAAb,CAAuB,gBAAvB,GAA0C,YAAY;AAClD,eAAO,KAAK,KAAZ;AACH,KAFD;AAGA,WAAO,YAAP;AACH,CARmB,EAApB;AASA,SAAS,eAAT,GAA2B;AACvB,WAAO,KAAK,MAAL,KAAgB,GAAhB,GAAsB,IAAI,oBAAJ,CAAyB,CAAzB,CAAtB,GAAoD,IAAI,YAAJ,CAAiB,GAAjB,CAA3D;AACH;AACD,IAAI,UAAU,iBAAd;AACA,IAAI,mBAAmB,oBAAvB,EAA6C;AACzC,YADyC,CAChC;AACZ;AACD,IAAI,mBAAmB,YAAvB,EAAqC;AACjC;AACH;AACD,SAAS,OAAT,CAAiB,CAAjB,EAAoB;AAChB,QAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B;AACvB,eAAO,CAAP;AACH,KAFD,MAGK;AACD,eAAO,GAAP;AACH;AACJ;AACD,IAAI,MAAJ;AACA,IAAI,IAAI,OAAO,KAAf;AACA,IAAI,IAAI,OAAO,IAAP,CAAY,KAApB;AACA,IAAI,IAAI,OAAO,IAAP,CAAY,IAAZ,CAAiB,KAAzB;AACA,IAAI,IAAI,OAAO,IAAP,CAAY,IAAZ,CAAiB,IAAjB,CAAsB,KAA9B;AACA,IAAI,YAAa,YAAY;AACzB,aAAS,SAAT,GAAqB,CACpB;AACD,cAAU,SAAV,CAAoB,OAApB,GAA8B,UAAU,EAAV,EAAc,EAAd,EAAkB,MAAlB,EAA0B;AACpD,YAAI,WAAW,SAAf,EAA0B,CACzB,CADD,MAEK,IAAI,WAAW,UAAf,EAA2B,CAC/B,CADI,MAEA,IAAI,WAAW,aAAf,EAA8B,CAClC,CADI,MAEA,CACJ;AACJ,KATD;AAUA,WAAO,SAAP;AACH,CAdgB,EAAjB;AAeA;AACA,IAAI,SAAS,IAAI,SAAJ,EAAb;AACA,OAAO,OAAP,CAAe,CAAf,EAAkB,CAAlB,EAAqB,SAArB;AACA,OAAO,OAAP,CAAe,CAAf,EAAkB,CAAlB,EAAqB,QAArB,E,CAAgC;AAChC,SAAS,aAAT,CAAuB,OAAvB,EAAgC,CAC/B;AACD,SAAS,IAAT,CAAc,CAAd,EAAiB;AACb,YAAQ,EAAE,IAAV;AACI,aAAK,QAAL;AAAe,mBAAO,EAAE,IAAF,GAAS,EAAE,IAAlB;AACf,aAAK,WAAL;AAAkB,mBAAO,EAAE,MAAF,GAAW,EAAE,KAApB;AAClB,aAAK,QAAL;AAAe,mBAAO,KAAK,EAAL,GAAU,KAAK,GAAL,CAAS,EAAE,MAAX,EAAmB,CAAnB,CAAjB;AAHnB;AAKH;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,kBAAmB,YAAY;AAC/B,aAAS,eAAT,CAAyB,KAAzB,EAAgC;AAC5B,YAAI,UAAU,KAAK,CAAnB,EAAsB;AAAE,oBAAQ,CAAR;AAAY;AACpC,aAAK,KAAL,GAAa,KAAb;AACH;AACD,oBAAgB,SAAhB,CAA0B,YAA1B,GAAyC,YAAY;AACjD,eAAO,KAAK,KAAZ;AACH,KAFD;AAGA,oBAAgB,SAAhB,CAA0B,GAA1B,GAAgC,UAAU,OAAV,EAAmB;AAC/C,aAAK,KAAL,IAAc,OAAd;AACA,eAAO,IAAP;AACH,KAHD;AAIA,oBAAgB,SAAhB,CAA0B,QAA1B,GAAqC,UAAU,OAAV,EAAmB;AACpD,aAAK,KAAL,IAAc,OAAd;AACA,eAAO,IAAP;AACH,KAHD;AAIA,WAAO,eAAP;AACH,CAjBsB,EAAvB;AAkBA,IAAI,IAAI,IAAI,eAAJ,CAAoB,CAApB,EAAuB,QAAvB,CAAgC,CAAhC,EAAmC,GAAnC,CAAuC,CAAvC,EAA0C,YAA1C,EAAR;AACA,QAAQ,GAAR,CAAY,CAAZ;AACA;AACA,IAAI,uBAAwB,UAAU,MAAV,EAAkB;AAC1C,cAAU,oBAAV,EAAgC,MAAhC;AACA,aAAS,oBAAT,CAA8B,KAA9B,EAAqC;AACjC,YAAI,UAAU,KAAK,CAAnB,EAAsB;AAAE,oBAAQ,CAAR;AAAY;AACpC,eAAO,IAAP,CAAY,IAAZ,EAAkB,KAAlB;AACH;AACD,yBAAqB,SAArB,CAA+B,GAA/B,GAAqC,YAAY;AAC7C,aAAK,KAAL,GAAa,KAAK,GAAL,CAAS,KAAK,KAAd,CAAb;AACA,eAAO,IAAP;AACH,KAHD;AAIA,WAAO,oBAAP;AACH,CAX2B,CAW1B,eAX0B,CAA5B;AAYA,IAAI,KAAK,IAAI,oBAAJ,CAAyB,CAAzB,EAA4B,QAA5B,CAAqC,CAArC,EAAwC,GAAxC,GAA8C,GAA9C,CAAkD,CAAlD,EAAqD,YAArD,EAAT;AACA;AACA;AACA;AACA","file":"交叉类型-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2017/2/8.\r\n */\r\n/**\r\n *交叉类型\r\n * 交叉类型是将多个类型合并为一个类型。\r\n * 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特效。\r\n * 例如，Person & Serializable & Loggable同时是Person和Serializable和Loggable。\r\n * 就是说这个类型的对象同时拥有了三种类型的成员。\r\n */\r\nvar __extends = (this && this.__extends) || function (d, b) {\r\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n};\r\n/**\r\n * 我们大多是混入或其它不合适典型面向对象模型的地方看到交叉类型的使用。\r\n */\r\n//交叉类型\r\nfunction extend(first, second) {\r\n    var result = {};\r\n    for (var id in first) {\r\n        result[id] = first[id];\r\n    }\r\n    for (var id in second) {\r\n        if (!result.hasOwnProperty(id)) {\r\n            result[id] = second[id];\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar Person = (function () {\r\n    function Person(name) {\r\n        this.name = name;\r\n    }\r\n    return Person;\r\n}());\r\nvar ConsoleLogger = (function () {\r\n    function ConsoleLogger() {\r\n    }\r\n    ConsoleLogger.prototype.log = function () {\r\n    };\r\n    return ConsoleLogger;\r\n}());\r\nvar jim = extend(new Person(\"Jim\"), new ConsoleLogger());\r\nvar n = jim.name;\r\njim.log();\r\n//联合类型\r\n/**\r\n *联合类型与交叉类型很有关联，但是使用上却完全不同。\r\n * 偶尔你会遇到这种情况，一个代码库希望传入number或string类型的参数。\r\n */\r\nfunction padLeft(value, padding) {\r\n    if (typeof padding === \"number\") {\r\n        return Array(padding + 1).join(\" \") + value;\r\n    }\r\n    if (typeof padding === \"string\") {\r\n        return padding + value;\r\n    }\r\n    throw new Error(\"Expected string or number,got '\" + padding + \"'.\");\r\n}\r\npadLeft(\"Hello world\", 4);\r\n//console.log(padLeft(\"hello world\",{a:2,b:3}));\r\nfunction padLeft1(value, padding) {\r\n    if (typeof padding === \"number\") {\r\n        return Array(padding + 1).join(\" \") + value;\r\n    }\r\n    if (typeof padding === \"boolean\") {\r\n        return padding + value;\r\n    }\r\n    throw new Error(\"Expected string or number,got '\" + padding + \"'.\");\r\n}\r\nvar indentedString = padLeft1(\"Hello world\", true);\r\nconsole.log(indentedString);\r\nfunction getSmallPet() {\r\n    //return let a:Bird;\r\n}\r\nvar pet = getSmallPet();\r\npet.layEggs();\r\npet.swim();\r\n//类型保护与区分类型\r\n/**\r\n * 联合类型非常适合这样的情形，可以接收的值有不同的类型。\r\n * 当我们想明确地知道是否拿到Fish时会怎么做？\r\n * javascript里常用来区分2个可能值的方法是检查它们是否存在。\r\n * 像之前提到的，我们只能访问联合类型的所有类型中共有的成员\r\n */\r\n/*let pet1=getSmallPet();\r\nif(pet1.swim){\r\n    pet1.swim();\r\n}\r\nelse if(pet1.fly){\r\n    pet1.fly();\r\n}*/\r\n//为了让这段代码工作，我们要使用类型断言\r\nvar pet2 = getSmallPet();\r\nif (pet2.swim()) {\r\n    pet2.swim();\r\n}\r\nelse {\r\n    pet2.fly();\r\n}\r\n/**\r\n *用户自定义的类型保护\r\n *可以注意到我们使用了多次类型断言。\r\n * 如果我们只要检查过一次类型，就能够在后面的每个分支里清除pet的类型的话就好了\r\n *\r\n * TypeScript里的类型保护机制让它成了现实。\r\n * 类型保护就是一些表达式,它们会运行时检查以确保在某个作用域里的类型。\r\n * 要定义一个类型保护，我们只要简单地定义一个函数，它的返回值是一个类型断言\r\n */\r\nfunction isFish(one) {\r\n    return one.swim() !== undefined;\r\n}\r\n//在这个例子里，one is Fish 就是类型断言。一个断言是 parameterName is type这种形式，\r\n//parameterName必须是来自于当前函数签名里的一个参数名。\r\n//每当使用一些变量调用isFish时，TypeScript会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的\r\n//‘swim’和‘fly’调用都没有问题了\r\nif (isFish(pet)) {\r\n    pet.swim();\r\n}\r\nelse {\r\n    pet.fly();\r\n}\r\n//typeof类型保护\r\n//现在我们回过头来看看怎么使用联合类型书写padLeft代码。\r\n//我们可以像下面这样利用类型断言来写：\r\nfunction isNumber(x) {\r\n    return typeof x === \"number\";\r\n}\r\nfunction isString(y) {\r\n    return typeof y === \"string\";\r\n}\r\nfunction padLeft2(value, padding) {\r\n    if (isNumber(padding)) {\r\n        return Array(padding + 1).join(\" \") + value;\r\n    }\r\n    if (isString(padding)) {\r\n        return padding + value;\r\n    }\r\n    throw new Error(\"Expected string or number,got '\" + padding + \"'\");\r\n}\r\nvar SpaceRepeatingPadder = (function () {\r\n    function SpaceRepeatingPadder(numSpaces) {\r\n        this.numSpaces = numSpaces;\r\n    }\r\n    SpaceRepeatingPadder.prototype.getPaddingString = function () {\r\n        return Array(this.numSpaces + 1).join(\" \");\r\n    };\r\n    return SpaceRepeatingPadder;\r\n}());\r\nvar StringPadder = (function () {\r\n    function StringPadder(value) {\r\n        this.value = value;\r\n    }\r\n    StringPadder.prototype.getPaddingString = function () {\r\n        return this.value;\r\n    };\r\n    return StringPadder;\r\n}());\r\nfunction getRandomPadder() {\r\n    return Math.random() < 0.5 ? new SpaceRepeatingPadder(4) : new StringPadder(\" \");\r\n}\r\nvar result1 = getRandomPadder();\r\nif (result1 instanceof SpaceRepeatingPadder) {\r\n    result1; //类型细化为‘SpaceRepeatingPadder’\r\n}\r\nif (result1 instanceof StringPadder) {\r\n    result1;\r\n}\r\nfunction getName(n) {\r\n    if (typeof n === \"string\") {\r\n        return n;\r\n    }\r\n    else {\r\n        return n();\r\n    }\r\n}\r\nvar people;\r\nvar s = people.Pname;\r\nvar s = people.next.Pname;\r\nvar s = people.next.next.Pname;\r\nvar s = people.next.next.next.Pname;\r\nvar UIElement = (function () {\r\n    function UIElement() {\r\n    }\r\n    UIElement.prototype.animate = function (dx, dy, easing) {\r\n        if (easing === \"ease-in\") {\r\n        }\r\n        else if (easing === \"ease-out\") {\r\n        }\r\n        else if (easing === \"ease-in-out\") {\r\n        }\r\n        else {\r\n        }\r\n    };\r\n    return UIElement;\r\n}());\r\n//你只能从三种允许的字符中选择其一来做为参数传递，传入其它值则会产生错误\r\nvar button = new UIElement();\r\nbutton.animate(0, 0, \"ease-in\");\r\nbutton.animate(0, 0, \"uneasy\"); //error: \"uneasy\" is not allowed here\r\nfunction createElement(tagName) {\r\n}\r\nfunction area(s) {\r\n    switch (s.kind) {\r\n        case \"square\": return s.size * s.size;\r\n        case \"rectangle\": return s.height * s.width;\r\n        case \"circle\": return Math.PI * Math.pow(s.radius, 2);\r\n    }\r\n}\r\n//完整性检查\r\n//当没有涵盖所有可辨识联合的变化时，我们想让编译可以通知我们。比如，如果我们添加了Triangle到Shape，我们同时还需要更新area；\r\n//多态的this类型\r\n//多态的this类型表示的是某个包含类或接口的子类型。\r\n// 这被称做 F-bounded多态性。 它能很容易的表现连贯接口间的继承，\r\n// 比如。 在计算器的例子里，在每个操作之后都返回 this类型：\r\nvar BasicCalculator = (function () {\r\n    function BasicCalculator(value) {\r\n        if (value === void 0) { value = 0; }\r\n        this.value = value;\r\n    }\r\n    BasicCalculator.prototype.currentVaule = function () {\r\n        return this.value;\r\n    };\r\n    BasicCalculator.prototype.add = function (operand) {\r\n        this.value += operand;\r\n        return this;\r\n    };\r\n    BasicCalculator.prototype.multiply = function (operand) {\r\n        this.value *= operand;\r\n        return this;\r\n    };\r\n    return BasicCalculator;\r\n}());\r\nvar v = new BasicCalculator(2).multiply(5).add(1).currentVaule();\r\nconsole.log(v);\r\n//由于这个类使用了this类型，你可以继承它，新的类可以直接使用之前的方法，不需要做任何的改变。\r\nvar ScientificCalculator = (function (_super) {\r\n    __extends(ScientificCalculator, _super);\r\n    function ScientificCalculator(value) {\r\n        if (value === void 0) { value = 0; }\r\n        _super.call(this, value);\r\n    }\r\n    ScientificCalculator.prototype.sin = function () {\r\n        this.value = Math.sin(this.value);\r\n        return this;\r\n    };\r\n    return ScientificCalculator;\r\n}(BasicCalculator));\r\nvar v2 = new ScientificCalculator(2).multiply(5).sin().add(1).currentVaule();\r\n//如果没有this类型，ScientificCalculator就不能够在继承BasicCalculator的同时还保持接口的连贯性。\r\n// multiply将会返回BasicCalculator，它并没有sin方法。\r\n// 然而，使用 this类型，multiply会返回this，在这里就是ScientificCalculator \r\n//# sourceMappingURL=交叉类型.js.map"]}