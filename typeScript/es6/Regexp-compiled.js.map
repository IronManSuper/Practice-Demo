{"version":3,"sources":["Regexp.js"],"names":[],"mappings":";;;;AAAA;;;AAGA,IAAM,QAAM,IAAZ;;AAEA,MAAM,SAAN,GAAgB,CAAhB;;AAEA,IAAM,QAAM,MAAM,IAAN,CAAW,MAAX,CAAZ;AACA,QAAQ,GAAR,CAAY,KAAZ;;AAEA,IAAI,IAAE,MAAM,KAAZ;;AAEA,QAAQ,GAAR,CAAY,CAAZ;;AAIA;AACA;;;AAGA;AACA;;AAEA;AACA,QAAQ,MAAR;;AAEA;AACA;AACA,QAAQ,KAAR;;AAEA,QAAQ,GAAR,CAAY,KAAG,EAAf;;AAGA,QAAQ,GAAR,CAAY,OAAO,gBAAP,KAA0B,KAAK,GAAL,CAAS,CAAT,EAAW,EAAX,IAAe,CAArD;;AAEA,QAAQ,GAAR,CAAY,OAAO,gBAAP,KAA0B,gBAAtC;;AAEA,QAAQ,GAAR,CAAY,OAAO,gBAAP,KAA0B,CAAC,OAAO,gBAA9C;;AAEA,QAAQ,GAAR,CAAY,OAAO,gBAAnB;;AAEA,QAAQ,GAAR,CAAY,OAAO,gBAAP,KAA0B,CAAC,gBAAvC;;AAGA,OAAO,aAAP,CAAqB,GAArB,E,CAA2B;AAC3B,OAAO,aAAP,CAAqB,gBAArB,E,CAAwC;;;AAGxC,IAAI,IAAE,KAAK,GAAL,CAAS,KAAK,GAAL,CAAS,CAAT,CAAT,EAAqB,IAAE,CAAvB,CAAN;AACA,QAAQ,GAAR,CAAY,CAAZ;;AAGA,QAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,CAAX,CAAZ,EAA0B,GAA1B;AACA,QAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,CAAX,CAAZ,EAA0B,GAA1B;AACA,QAAQ,GAAR,CAAY,KAAK,KAAL,CAAW,KAAG,CAAd,CAAZ,EAA6B,GAA7B;;AAGA,IAAI,YAAY;AACZ,SAAK,GADO;AAEZ,SAAK,GAFO;AAGZ,SAAK,GAHO;AAIZ,YAAQ;AAJI,CAAhB;;AAOA,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,SAAX,CAAZ;;AAIA,IAAI,KAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAY,UAAZ,CAAuB,CAAvB,EAAyB,CAAzB,EAA2B,CAA3B,CAAP;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,KAAG,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAY,UAAZ,CAAuB,CAAvB,EAAyB,CAAC,CAA1B,EAA4B,CAAC,CAA7B,CAAP;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,KAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,QAAV,CAAmB,CAAnB,CAAP;AACA,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,KAAG,GAAE,GAAF,EAAM,GAAN,IAAa,UAAb,CAAwB,CAAxB,EAA0B,CAA1B,CAAP,C,CAAqC;AACrC,QAAQ,GAAR,CAAY,EAAZ;;AAEA,IAAI,kCAAO,GAAE,GAAF,EAAO,OAAP,EAAP,EAAJ;AACA,QAAQ,GAAR,CAAY,EAAZ","file":"Regexp-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2017/2/16.\r\n */\r\nconst REGEX=/a/g;\r\n\r\nREGEX.lastIndex=2;\r\n\r\nconst match=REGEX.exec('xaya');\r\nconsole.log(match);\r\n\r\nlet a=match.index;\r\n\r\nconsole.log(a);\r\n\r\n\r\n\r\n//sticky属性\r\n//与Y修饰符相匹配，ES6的正则对象多了sticky属性，表示是否设置了Y修饰符\r\n\r\n\r\n//flags属性\r\n//ES6为正则表达式新增了flags属性，会返回正则表达式的修饰符。\r\n\r\n//ES5的source返回正则表达式的正文\r\n/abc/ig.source;\r\n\r\n//ES6的flags属性\r\n//返回正则表达式的修饰符\r\n/abc/ig.flags;\r\n\r\nconsole.log(12<11);\r\n\r\n\r\nconsole.log(Number.MAX_SAFE_INTEGER===Math.pow(2,53)-1);\r\n\r\nconsole.log(Number.MAX_SAFE_INTEGER===9007199254740991);\r\n\r\nconsole.log(Number.MIN_SAFE_INTEGER===-Number.MAX_SAFE_INTEGER);\r\n\r\nconsole.log(Number.MIN_SAFE_INTEGER);\r\n\r\nconsole.log(Number.MIN_SAFE_INTEGER===-9007199254740991);\r\n\r\n\r\nNumber.isSafeInteger(1.2); // false\r\nNumber.isSafeInteger(9007199254740990); // true\r\n\r\n\r\nvar y=Math.pow(Math.abs(8),1/3);\r\nconsole.log(y);\r\n\r\n\r\nconsole.log(Math.clz32(0),'1');\r\nconsole.log(Math.clz32(1),'2');\r\nconsole.log(Math.clz32(1<<1),'3');\r\n\r\n\r\nlet arrayLike = {\r\n    '0': 'a',\r\n    '1': 'b',\r\n    '2': 'c',\r\n    length: 3\r\n};\r\n\r\nconsole.log(Array.from(arrayLike));\r\n\r\n\r\n\r\nlet a1=[1,2,3,4,5].copyWithin(0,3,4);\r\nconsole.log(a1);\r\n\r\nlet a2=[1,2,3,4,5].copyWithin(0,-2,-1);\r\nconsole.log(a2);\r\n\r\nlet a3=[1, 2, 3].includes(2);\r\nconsole.log(a3);\r\n\r\nlet a4=[,'a','b',,].copyWithin(2,0); // [,\"a\",,\"a\"]\r\nconsole.log(a4);\r\n\r\nlet a5=[...[,'a'].entries()];\r\nconsole.log(a5);"]}