{"version":3,"sources":["FnDemo1.js"],"names":[],"mappings":";;AAAA;;;AAGA;;;AAGA;AACA,SAAS,GAAT,CAAa,CAAb,EAAgB,CAAhB,EAAmB;AACf,WAAO,IAAI,CAAX;AACH;AACD,IAAI,QAAQ,SAAR,KAAQ,CAAU,CAAV,EAAa,CAAb,EAAgB;AACxB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA,IAAI,IAAI,GAAR;AACA,SAAS,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,EAAsB;AAClB,WAAO,IAAI,CAAJ,GAAQ,CAAf;AACH;AACD;AACA;AACA,SAAS,IAAT,CAAc,CAAd,EAAiB,CAAjB,EAAoB;AAChB,WAAO,IAAI,CAAX;AACH;AACD,IAAI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa,CAAb,EAAgB;AACzB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA;AACA;;;AAGA,IAAI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa,CAAb,EAAgB;AACzB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA,IAAI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa,CAAb,EAAgB;AACzB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA;AACA;AACA;AACA,IAAI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa,CAAb,EAAgB;AACzB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA,IAAI,SAAS,SAAT,MAAS,CAAU,CAAV,EAAa,CAAb,EAAgB;AACzB,WAAO,IAAI,CAAX;AACH,CAFD;AAGA;AACA,SAAS,SAAT,CAAmB,SAAnB,EAA8B,QAA9B,EAAwC;AACpC,WAAO,YAAY,GAAZ,GAAkB,QAAzB;AACH;AACD,IAAI,UAAU,UAAU,KAAV,CAAd;AACA,IAAI,UAAU,UAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,CAAd;AACA,IAAI,UAAU,UAAU,KAAV,EAAiB,OAAjB,CAAd;AACA;;;;;AAKA;AACA,SAAS,UAAT,CAAoB,SAApB,EAA+B,QAA/B,EAAyC;AACrC,QAAI,QAAJ,EAAc;AACV,eAAO,YAAY,GAAZ,GAAkB,QAAzB;AACH,KAFD,MAGK;AACD,eAAO,SAAP;AACH;AACJ;AACD,IAAI,MAAM,WAAW,KAAX,CAAV;AACA,IAAI,MAAM,WAAW,KAAX,EAAkB,OAAlB,EAA2B,KAA3B,CAAV;AACA,IAAI,MAAM,WAAW,KAAX,EAAkB,OAAlB,CAAV;AACA;AACA,SAAS,UAAT,CAAoB,SAApB,EAA+B,QAA/B,EAAyC;AACrC,QAAI,aAAa,KAAK,CAAtB,EAAyB;AAAE,mBAAW,OAAX;AAAqB;AAChD,YAAQ,GAAR,CAAY,YAAY,GAAZ,GAAkB,QAA9B;AACA,WAAO,YAAY,GAAZ,GAAkB,QAAzB;AACH;AACD,IAAI,MAAM,WAAW,KAAX,CAAV;AACA,IAAI,MAAM,WAAW,KAAX,EAAkB,SAAlB,CAAV;AACA,IAAI,MAAM,WAAW,KAAX,EAAkB,OAAlB,EAA2B,KAA3B,CAAV;AACA,IAAI,MAAM,WAAW,KAAX,EAAkB,OAAlB,CAAV;AACA,SAAS,UAAT,CAAoB,SAApB,EAA+B;AAC3B,QAAI,aAAa,EAAjB;AACA,SAAK,IAAI,KAAK,CAAd,EAAiB,KAAK,UAAU,MAAhC,EAAwC,IAAxC,EAA8C;AAC1C,mBAAW,KAAK,CAAhB,IAAqB,UAAU,EAAV,CAArB;AACH;AACD,YAAQ,GAAR,CAAY,UAAZ;AACA,WAAO,YAAY,GAAZ,GAAkB,WAAW,IAAX,CAAgB,GAAhB,CAAzB;AACH;AACD,IAAI,eAAe,WAAW,QAAX,EAAqB,QAArB,EAA+B,OAA/B,EAAwC,WAAxC,CAAnB;AACA,QAAQ,GAAR,CAAY,YAAZ;AACA","file":"FnDemo1-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2017/2/6.\r\n */\r\n/**\r\n *typeScript函数\r\n */\r\n//和javascript一样，TypeScript函数可以创建有名字的函数和匿名函数。\r\nfunction add(x, y) {\r\n    return x + y;\r\n}\r\nvar myAdd = function (x, y) {\r\n    return x + y;\r\n};\r\nvar z = 100;\r\nfunction addToz(x, y) {\r\n    return x + y + z;\r\n}\r\n//函数类型\r\n//为函数定义类型\r\nfunction add2(x, y) {\r\n    return x + y;\r\n}\r\nvar myAdd2 = function (x, y) {\r\n    return x + y;\r\n};\r\n//书写完整函数类型\r\n/**\r\n *函数类型包含两部分：参数类型和返回值类型。\r\n */\r\nvar myAdd3 = function (x, y) {\r\n    return x + y;\r\n};\r\nvar myAdd4 = function (x, y) {\r\n    return x + y;\r\n};\r\n//推断类型\r\n//尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另外一边没有类型的话，TypeScript编译器会自动识别出类型\r\n//这叫做“按上下文归类”，是类型推论的一种\r\nvar myAdd5 = function (x, y) {\r\n    return x + y;\r\n};\r\nvar myAdd6 = function (x, y) {\r\n    return x + y;\r\n};\r\n//可选参数和默认参数\r\nfunction buildName(firstName, lastName) {\r\n    return firstName + \" \" + lastName;\r\n}\r\nvar result1 = buildName(\"Bob\");\r\nvar result2 = buildName(\"Bob\", \"Adams\", \"Sr.\");\r\nvar result3 = buildName(\"Bob\", \"Adams\");\r\n/**\r\n * javascript里，每个参数都是可选的，可传可不传。\r\n * 没传参的时候，它的值就是undefined。\r\n * 在TypeScript里我们可以在参数的旁边使用\"?\"实现可选参数的功能。\r\n */\r\n//可选参数必须跟在必须参数后面。\r\nfunction buildName2(firstName, lastName) {\r\n    if (lastName) {\r\n        return firstName + \" \" + lastName;\r\n    }\r\n    else {\r\n        return firstName;\r\n    }\r\n}\r\nvar rl1 = buildName2(\"Bob\");\r\nvar rl2 = buildName2(\"Bob\", \"Adams\", \"Sr.\");\r\nvar rl3 = buildName2(\"Bob\", \"Adams\");\r\n//为参数设置默认值\r\nfunction buildName3(firstName, lastName) {\r\n    if (lastName === void 0) { lastName = \"Smith\"; }\r\n    console.log(firstName + \" \" + lastName);\r\n    return firstName + \" \" + lastName;\r\n}\r\nvar rt1 = buildName3(\"Bob\");\r\nvar rt2 = buildName3(\"Bob\", undefined);\r\nvar rt3 = buildName3(\"Bob\", \"Adams\", \"Sr.\");\r\nvar rt4 = buildName3(\"Bob\", \"Adams\");\r\nfunction buildName4(firstName) {\r\n    var restOfName = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        restOfName[_i - 1] = arguments[_i];\r\n    }\r\n    console.log(restOfName);\r\n    return firstName + \" \" + restOfName.join(\" \");\r\n}\r\nvar employeeName = buildName4(\"Joseph\", \"Samuel\", \"Lucas\", \"MacKinzie\");\r\nconsole.log(employeeName);\r\n//# sourceMappingURL=FnDemo1.js.map"]}