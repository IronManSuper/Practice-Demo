{"version":3,"sources":["Test.js"],"names":[],"mappings":";;AAAA;;;AAGA;AACA;AACA;AACA,IAAI,UAAU,CAAC,OAAD,EAAU,OAAV,EAAmB,KAAnB,CAAd;AACA,IAAI,aAAa,EAAjB;AACA,WAAW,UAAX,IAAyB,IAAI,WAAW,gBAAf,EAAzB;AACA,WAAW,cAAX,IAA6B,IAAI,WAAW,oBAAf,EAA7B;AACA,QAAQ,OAAR,CAAgB,UAAU,CAAV,EAAa;AACzB,SAAK,IAAI,MAAT,IAAmB,UAAnB,EAA+B;AAC3B,gBAAQ,GAAR,CAAY,KAAK,CAAL,GAAS,GAAT,IAAgB,WAAW,MAAX,EAAmB,YAAnB,CAAgC,CAAhC,IAAqC,WAArC,GAAmD,kBAAnE,IAAyF,MAArG;AACH;AACJ,CAJD;AAKA","file":"Test-compiled.js","sourcesContent":["/**\r\n * Created by Administrator on 2017/2/10.\r\n */\r\n///<reference path=\"Validation.ts\"/>\r\n///<reference path=\"LettersOnlyValidator.ts\"/>\r\n///<reference path=\"ZipCodeValidator.ts\"/>\r\nvar strings = [\"Hello\", \"98052\", \"101\"];\r\nvar validators = {};\r\nvalidators[\"ZIP code\"] = new Validation.ZipCodeValidator();\r\nvalidators[\"Letters only\"] = new Validation.LettersOnlyValidator();\r\nstrings.forEach(function (s) {\r\n    for (var name_1 in validators) {\r\n        console.log(\"\" + s + \" \" + (validators[name_1].isAcceptable(s) ? \" matches \" : \" does not match \") + name_1);\r\n    }\r\n});\r\n//# sourceMappingURL=Test.js.map"]}