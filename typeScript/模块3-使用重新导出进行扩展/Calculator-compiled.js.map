{"version":3,"sources":["Calculator.js"],"names":[],"mappings":"AAAA;AACA;;;;AAGA,IAAI,aAAc,YAAY;AAC1B,aAAS,UAAT,GAAsB;AAClB,aAAK,OAAL,GAAe,CAAf;AACA,aAAK,MAAL,GAAc,CAAd;AACH;AACD,eAAW,SAAX,CAAqB,YAArB,GAAoC,UAAU,KAAV,EAAiB,YAAjB,EAA+B;AAC/D,YAAI,SAAS,GAAT,IAAgB,SAAS,GAA7B,EAAkC;AAC9B,mBAAO,YAAP;AACH;AACJ,KAJD;AAKA,eAAW,SAAX,CAAqB,eAArB,GAAuC,UAAU,QAAV,EAAoB;AACvD,YAAI,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,OAArB,CAA6B,QAA7B,KAA0C,CAA9C,EAAiD;AAC7C,mBAAO,QAAP;AACH;AACJ,KAJD;AAKA,eAAW,SAAX,CAAqB,gBAArB,GAAwC,UAAU,QAAV,EAAoB,IAApB,EAA0B,KAA1B,EAAiC;AACrE,gBAAQ,KAAK,QAAb;AACI,iBAAK,GAAL;AAAU,uBAAO,OAAO,KAAd;AACV,iBAAK,GAAL;AAAU,uBAAO,OAAO,KAAd;AACV,iBAAK,GAAL;AAAU,uBAAO,OAAO,KAAd;AACV,iBAAK,GAAL;AAAU,uBAAO,OAAO,KAAd;AAJd;AAMH,KAPD;AAQA,eAAW,SAAX,CAAqB,QAArB,GAAgC,YAAY;AACxC,YAAI,KAAK,QAAT,EAAmB;AACf,iBAAK,MAAL,GAAc,KAAK,gBAAL,CAAsB,KAAK,QAA3B,EAAqC,KAAK,MAA1C,EAAkD,KAAK,OAAvD,CAAd;AACH,SAFD,MAGK;AACD,iBAAK,MAAL,GAAc,KAAK,OAAnB;AACH;AACD,aAAK,OAAL,GAAe,CAAf;AACH,KARD;AASA,eAAW,SAAX,CAAqB,UAArB,GAAkC,UAAU,IAAV,EAAgB;AAC9C,YAAI,SAAS,GAAb,EAAkB;AACd,iBAAK,QAAL;AACA;AACH,SAHD,MAIK;AACD,gBAAI,QAAQ,KAAK,YAAL,CAAkB,IAAlB,EAAwB,KAAK,OAA7B,CAAZ;AACA,gBAAI,UAAU,SAAd,EAAyB;AACrB,qBAAK,OAAL,GAAe,KAAf;AACA;AACH,aAHD,MAIK;AACD,oBAAI,UAAU,KAAK,eAAL,CAAqB,IAArB,CAAd;AACA,oBAAI,YAAY,SAAhB,EAA2B;AACvB,yBAAK,QAAL;AACA,yBAAK,QAAL,GAAgB,OAAhB;AACA;AACH;AACJ;AACJ;AACD,cAAM,IAAI,KAAJ,CAAU,wBAAwB,IAAxB,GAA+B,GAAzC,CAAN;AACH,KArBD;AAsBA,eAAW,SAAX,CAAqB,SAArB,GAAiC,YAAY;AACzC,eAAO,KAAK,MAAZ;AACH,KAFD;AAGA,WAAO,UAAP;AACH,CA1DiB,EAAlB;AA2DA,QAAQ,UAAR,GAAqB,UAArB;AACA,SAAS,IAAT,CAAc,CAAd,EAAiB,KAAjB,EAAwB;AACpB,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,MAAM,MAA1B,EAAkC,GAAlC,EAAuC;AACnC,UAAE,UAAF,CAAa,MAAM,CAAN,CAAb;AACH;AACD,YAAQ,GAAR,CAAY,gBAAgB,KAAhB,GAAwB,QAAxB,GAAmC,EAAE,SAAF,EAAnC,GAAmD,GAA/D;AACH;AACD,QAAQ,IAAR,GAAe,IAAf;AACA","file":"Calculator-compiled.js","sourcesContent":["\"use strict\";\r\n/**\r\n * Created by Administrator on 2017/2/9.\r\n */\r\nvar Calculator = (function () {\r\n    function Calculator() {\r\n        this.current = 0;\r\n        this.memory = 0;\r\n    }\r\n    Calculator.prototype.processDigit = function (digit, currentValue) {\r\n        if (digit >= \"0\" && digit <= \"9\") {\r\n            return currentValue;\r\n        }\r\n    };\r\n    Calculator.prototype.processOperator = function (operator) {\r\n        if ([\"+\", \"-\", \"*\", \"/\"].indexOf(operator) >= 0) {\r\n            return operator;\r\n        }\r\n    };\r\n    Calculator.prototype.evaluateOperator = function (operator, left, right) {\r\n        switch (this.operator) {\r\n            case \"+\": return left + right;\r\n            case \"-\": return left - right;\r\n            case \"*\": return left * right;\r\n            case \"/\": return left / right;\r\n        }\r\n    };\r\n    Calculator.prototype.evaluate = function () {\r\n        if (this.operator) {\r\n            this.memory = this.evaluateOperator(this.operator, this.memory, this.current);\r\n        }\r\n        else {\r\n            this.memory = this.current;\r\n        }\r\n        this.current = 0;\r\n    };\r\n    Calculator.prototype.handelChar = function (char) {\r\n        if (char === \"=\") {\r\n            this.evaluate();\r\n            return;\r\n        }\r\n        else {\r\n            var value = this.processDigit(char, this.current);\r\n            if (value !== undefined) {\r\n                this.current = value;\r\n                return;\r\n            }\r\n            else {\r\n                var value_1 = this.processOperator(char);\r\n                if (value_1 !== undefined) {\r\n                    this.evaluate();\r\n                    this.operator = value_1;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        throw new Error(\"Unsupported input:'\" + char + \"'\");\r\n    };\r\n    Calculator.prototype.getResult = function () {\r\n        return this.memory;\r\n    };\r\n    return Calculator;\r\n}());\r\nexports.Calculator = Calculator;\r\nfunction test(c, input) {\r\n    for (var i = 0; i < input.length; i++) {\r\n        c.handelChar(input[i]);\r\n    }\r\n    console.log(\"result of '\" + input + \"' is '\" + c.getResult() + \"'\");\r\n}\r\nexports.test = test;\r\n//# sourceMappingURL=Calculator.js.map"]}